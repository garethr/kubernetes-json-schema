{
  "definitions": {
    "v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "datasetName": {
          "type": "string", 
          "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
        }, 
        "datasetUUID": {
          "type": "string", 
          "description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
        }
      }
    }, 
    "v1.FlexVolumeSource": {
      "required": [
        "driver"
      ], 
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.", 
      "properties": {
        "secretRef": {
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.", 
          "$ref": "#/definitions/v1.LocalObjectReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver is the name of the driver to use for this volume."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "options": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Optional: Extra command options if any."
        }
      }
    }, 
    "v1.SecretKeySelector": {
      "required": [
        "key"
      ], 
      "description": "SecretKeySelector selects a key of a Secret.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "key": {
          "type": "string", 
          "description": "The key of the secret to select from.  Must be a valid secret key."
        }
      }
    }, 
    "v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object", 
      "properties": {
        "gracePeriodSeconds": {
          "type": "integer", 
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.", 
          "format": "int64"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "preconditions": {
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.", 
          "$ref": "#/definitions/v1.Preconditions"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "orphanDependents": {
          "type": "boolean", 
          "description": "Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list."
        }
      }
    }, 
    "v1.NodeStatus": {
      "description": "NodeStatus is information about the current status of a node.", 
      "properties": {
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Capacity represents the total resources of a node. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#capacity for more details."
        }, 
        "addresses": {
          "items": {
            "$ref": "#/definitions/v1.NodeAddress"
          }, 
          "type": "array", 
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-addresses"
        }, 
        "images": {
          "items": {
            "$ref": "#/definitions/v1.ContainerImage"
          }, 
          "type": "array", 
          "description": "List of container images on this node"
        }, 
        "nodeInfo": {
          "description": "Set of ids/uuids to uniquely identify the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-info", 
          "$ref": "#/definitions/v1.NodeSystemInfo"
        }, 
        "volumesAttached": {
          "items": {
            "$ref": "#/definitions/v1.AttachedVolume"
          }, 
          "type": "array", 
          "description": "List of volumes that are attached to the node."
        }, 
        "allocatable": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity."
        }, 
        "volumesInUse": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of attachable volumes in use (mounted) by the node."
        }, 
        "daemonEndpoints": {
          "description": "Endpoints of daemons running on the Node.", 
          "$ref": "#/definitions/v1.NodeDaemonEndpoints"
        }, 
        "phase": {
          "type": "string", 
          "description": "NodePhase is the recently observed lifecycle phase of the node. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-phase The field is never populated, and now is deprecated."
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1.NodeCondition"
          }, 
          "type": "array", 
          "description": "Conditions is an array of current observed node conditions. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#node-condition"
        }
      }
    }, 
    "unversioned.APIResource": {
      "required": [
        "name", 
        "namespaced", 
        "kind"
      ], 
      "description": "APIResource specifies the name of a resource and whether it is namespaced.", 
      "properties": {
        "namespaced": {
          "type": "boolean", 
          "description": "namespaced indicates if a resource is namespaced or not."
        }, 
        "kind": {
          "type": "string", 
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the resource."
        }
      }
    }, 
    "v1.ServiceSpec": {
      "required": [
        "ports"
      ], 
      "description": "ServiceSpec describes the attributes that a user creates on a service.", 
      "properties": {
        "loadBalancerIP": {
          "type": "string", 
          "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature."
        }, 
        "deprecatedPublicIPs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used."
        }, 
        "externalIPs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field."
        }, 
        "loadBalancerSourceRanges": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: http://kubernetes.io/docs/user-guide/services-firewalls"
        }, 
        "selector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: http://kubernetes.io/docs/user-guide/services#overview"
        }, 
        "externalName": {
          "type": "string", 
          "description": "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires Type to be ExternalName."
        }, 
        "clusterIP": {
          "type": "string", 
          "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: http://kubernetes.io/docs/user-guide/services#virtual-ips-and-service-proxies"
        }, 
        "sessionAffinity": {
          "type": "string", 
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://kubernetes.io/docs/user-guide/services#virtual-ips-and-service-proxies"
        }, 
        "type": {
          "type": "string", 
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: http://kubernetes.io/docs/user-guide/services#overview"
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/v1.ServicePort"
          }, 
          "type": "array", 
          "description": "The list of ports that are exposed by this service. More info: http://kubernetes.io/docs/user-guide/services#virtual-ips-and-service-proxies"
        }
      }
    }, 
    "v1.NamespaceStatus": {
      "description": "NamespaceStatus is information about the current status of a Namespace.", 
      "properties": {
        "phase": {
          "type": "string", 
          "description": "Phase is the current lifecycle phase of the namespace. More info: http://releases.k8s.io/HEAD/docs/design/namespaces.md#phases"
        }
      }
    }, 
    "v1beta1.DaemonSetStatus": {
      "required": [
        "currentNumberScheduled", 
        "numberMisscheduled", 
        "desiredNumberScheduled", 
        "numberReady"
      ], 
      "description": "DaemonSetStatus represents the current status of a daemon set.", 
      "properties": {
        "currentNumberScheduled": {
          "type": "integer", 
          "description": "CurrentNumberScheduled is the number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md", 
          "format": "int32"
        }, 
        "numberReady": {
          "type": "integer", 
          "description": "NumberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.", 
          "format": "int32"
        }, 
        "desiredNumberScheduled": {
          "type": "integer", 
          "description": "DesiredNumberScheduled is the total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md", 
          "format": "int32"
        }, 
        "numberMisscheduled": {
          "type": "integer", 
          "description": "NumberMisscheduled is the number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: http://releases.k8s.io/HEAD/docs/admin/daemons.md", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.PodDisruptionBudget": {
      "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the PodDisruptionBudget.", 
          "$ref": "#/definitions/v1beta1.PodDisruptionBudgetStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the PodDisruptionBudget.", 
          "$ref": "#/definitions/v1beta1.PodDisruptionBudgetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1alpha1.RoleBindingList": {
      "required": [
        "items"
      ], 
      "description": "RoleBindingList is a collection of RoleBindings", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.RoleBinding"
          }, 
          "type": "array", 
          "description": "Items is a list of RoleBindings"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1alpha1.RoleRef": {
      "required": [
        "apiGroup", 
        "kind", 
        "name"
      ], 
      "description": "RoleRef contains information that points to the role being used", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is the type of resource being referenced"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced"
        }
      }
    }, 
    "v1.ResourceQuotaList": {
      "required": [
        "items"
      ], 
      "description": "ResourceQuotaList is a list of ResourceQuota items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.ResourceQuota"
          }, 
          "type": "array", 
          "description": "Items is a list of ResourceQuota objects. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.PodList": {
      "required": [
        "items"
      ], 
      "description": "PodList is a list of Pods.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Pod"
          }, 
          "type": "array", 
          "description": "List of pods. More info: http://kubernetes.io/docs/user-guide/pods"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.", 
      "properties": {
        "secretKeyRef": {
          "description": "Selects a key of a secret in the pod's namespace", 
          "$ref": "#/definitions/v1.SecretKeySelector"
        }, 
        "fieldRef": {
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.", 
          "$ref": "#/definitions/v1.ObjectFieldSelector"
        }, 
        "configMapKeyRef": {
          "description": "Selects a key of a ConfigMap.", 
          "$ref": "#/definitions/v1.ConfigMapKeySelector"
        }, 
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.", 
          "$ref": "#/definitions/v1.ResourceFieldSelector"
        }
      }
    }, 
    "v1beta1.TokenReviewStatus": {
      "description": "TokenReviewStatus is the result of the token authentication request.", 
      "properties": {
        "authenticated": {
          "type": "boolean", 
          "description": "Authenticated indicates that the token was associated with a known user."
        }, 
        "user": {
          "description": "User is the UserInfo associated with the provided token.", 
          "$ref": "#/definitions/v1beta1.UserInfo"
        }, 
        "error": {
          "type": "string", 
          "description": "Error indicates that the token couldn't be checked"
        }
      }
    }, 
    "unversioned.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.", 
      "properties": {
        "selfLink": {
          "type": "string", 
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        }
      }
    }, 
    "v1beta1.HTTPIngressPath": {
      "required": [
        "backend"
      ], 
      "description": "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend."
        }, 
        "backend": {
          "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.", 
          "$ref": "#/definitions/v1beta1.IngressBackend"
        }
      }
    }, 
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "clusterName": {
          "type": "string", 
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
        }, 
        "deletionGracePeriodSeconds": {
          "type": "integer", 
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.", 
          "format": "int64"
        }, 
        "labels": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
        }, 
        "finalizers": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
        }, 
        "generation": {
          "type": "integer", 
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.", 
          "format": "int64"
        }, 
        "generateName": {
          "type": "string", 
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#idempotency"
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        }, 
        "ownerReferences": {
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          }, 
          "type": "array", 
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
        }, 
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "annotations": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        }, 
        "selfLink": {
          "type": "string", 
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      }
    }, 
    "v2alpha1.JobList": {
      "required": [
        "items"
      ], 
      "description": "JobList is a collection of jobs.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v2alpha1.Job"
          }, 
          "type": "array", 
          "description": "Items is the list of Job."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "unversioned.APIVersions": {
      "required": [
        "versions", 
        "serverAddressByClientCIDRs"
      ], 
      "description": "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.", 
      "properties": {
        "serverAddressByClientCIDRs": {
          "items": {
            "$ref": "#/definitions/unversioned.ServerAddressByClientCIDR"
          }, 
          "type": "array", 
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "versions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "versions are the api versions that are available."
        }
      }
    }, 
    "v1beta1.ThirdPartyResource": {
      "description": "A ThirdPartyResource is a generic representation of a resource, it is used by add-ons and plugins to add new resource types to the API.  It consists of one or more Versions of the api.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }, 
        "description": {
          "type": "string", 
          "description": "Description is the description of this object."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "versions": {
          "items": {
            "$ref": "#/definitions/v1beta1.APIVersion"
          }, 
          "type": "array", 
          "description": "Versions are versions for this third party object"
        }
      }
    }, 
    "unversioned.LabelSelectorRequirement": {
      "required": [
        "key", 
        "operator"
      ], 
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
        }, 
        "values": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
        }, 
        "key": {
          "type": "string", 
          "description": "key is the label key that the selector applies to."
        }
      }
    }, 
    "v1beta1.NetworkPolicyIngressRule": {
      "description": "This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.", 
      "properties": {
        "from": {
          "items": {
            "$ref": "#/definitions/v1beta1.NetworkPolicyPeer"
          }, 
          "type": "array", 
          "description": "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is not provided, this rule matches all sources (traffic not restricted by source). If this field is empty, this rule matches no sources (no traffic matches). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list."
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/v1beta1.NetworkPolicyPort"
          }, 
          "type": "array", 
          "description": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is not provided, this rule matches all ports (traffic not restricted by port). If this field is empty, this rule matches no ports (no traffic matches). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list."
        }
      }
    }, 
    "v1.ComponentStatus": {
      "description": "ComponentStatus (and ComponentStatusList) holds the cluster validation info.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1.ComponentCondition"
          }, 
          "type": "array", 
          "description": "List of component conditions observed"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.ReplicationControllerStatus": {
      "required": [
        "replicas"
      ], 
      "description": "ReplicationControllerStatus represents the current status of a replication controller.", 
      "properties": {
        "availableReplicas": {
          "type": "integer", 
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the most recently oberved number of replicas. More info: http://kubernetes.io/docs/user-guide/replication-controller#what-is-a-replication-controller", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.", 
          "format": "int64"
        }, 
        "readyReplicas": {
          "type": "integer", 
          "description": "The number of ready replicas for this replication controller.", 
          "format": "int32"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1.ReplicationControllerCondition"
          }, 
          "type": "array", 
          "description": "Represents the latest available observations of a replication controller's current state."
        }, 
        "fullyLabeledReplicas": {
          "type": "integer", 
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.NetworkPolicyList": {
      "required": [
        "items"
      ], 
      "description": "Network Policy List is a list of NetworkPolicy objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.NetworkPolicy"
          }, 
          "type": "array", 
          "description": "Items is a list of schema objects."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "unversioned.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "group": {
          "type": "string", 
          "description": "The group attribute of the resource associated with the status StatusReason."
        }, 
        "name": {
          "type": "string", 
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
        }, 
        "retryAfterSeconds": {
          "type": "integer", 
          "description": "If specified, the time in seconds before the operation should be retried.", 
          "format": "int32"
        }, 
        "causes": {
          "items": {
            "$ref": "#/definitions/unversioned.StatusCause"
          }, 
          "type": "array", 
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
        }
      }
    }, 
    "v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
        }, 
        "hostname": {
          "type": "string", 
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
        }
      }
    }, 
    "v1.SecretList": {
      "required": [
        "items"
      ], 
      "description": "SecretList is a list of Secret.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Secret"
          }, 
          "type": "array", 
          "description": "Items is a list of secret objects. More info: http://kubernetes.io/docs/user-guide/secrets"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.ServicePort": {
      "required": [
        "port"
      ], 
      "description": "ServicePort contains information on service's port.", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP."
        }, 
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: http://kubernetes.io/docs/user-guide/services#defining-a-service", 
          "$ref": "#/definitions/intstr.IntOrString"
        }, 
        "port": {
          "type": "integer", 
          "description": "The port that will be exposed by this service.", 
          "format": "int32"
        }, 
        "nodePort": {
          "type": "integer", 
          "description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://kubernetes.io/docs/user-guide/services#type--nodeport", 
          "format": "int32"
        }, 
        "name": {
          "type": "string", 
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service."
        }
      }
    }, 
    "v1.ReplicationControllerList": {
      "required": [
        "items"
      ], 
      "description": "ReplicationControllerList is a collection of replication controllers.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.ReplicationController"
          }, 
          "type": "array", 
          "description": "List of replication controllers. More info: http://kubernetes.io/docs/user-guide/replication-controller"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.DaemonEndpoint": {
      "required": [
        "Port"
      ], 
      "description": "DaemonEndpoint contains information about a single Daemon endpoint.", 
      "properties": {
        "Port": {
          "type": "integer", 
          "description": "Port number of the given endpoint.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.NetworkPolicyPort": {
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP."
        }, 
        "port": {
          "description": "If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.", 
          "$ref": "#/definitions/intstr.IntOrString"
        }
      }
    }, 
    "v1.CrossVersionObjectReference": {
      "required": [
        "kind", 
        "name"
      ], 
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind of the referent; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\""
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent"
        }
      }
    }, 
    "v1.Pod": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.PodStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.PodSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.SubresourceReference": {
      "description": "SubresourceReference contains enough information to let you inspect or modify the referred subresource.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind of the referent; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent"
        }, 
        "subresource": {
          "type": "string", 
          "description": "Subresource name of the referent"
        }
      }
    }, 
    "v1.PodTemplate": {
      "description": "PodTemplate describes a template for creating copies of a predefined pod.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "template": {
          "description": "Template defines the pods that will be created from this pod template. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.Job": {
      "description": "Job represents the configuration of a single job.", 
      "properties": {
        "status": {
          "description": "Status is a structure describing current status of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.JobStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec is a structure defining the expected behavior of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.JobSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.PersistentVolumeClaimVolumeSource": {
      "required": [
        "claimName"
      ], 
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
        }, 
        "claimName": {
          "type": "string", 
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims"
        }
      }
    }, 
    "v1beta1.JobCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "JobCondition describes current state of a job.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason for the condition's last transition."
        }, 
        "lastProbeTime": {
          "description": "Last time the condition was checked.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of job condition, Complete or Failed."
        }, 
        "message": {
          "type": "string", 
          "description": "Human readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1.ComponentStatusList": {
      "required": [
        "items"
      ], 
      "description": "Status of all the conditions for the component as a list of ComponentStatus objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.ComponentStatus"
          }, 
          "type": "array", 
          "description": "List of ComponentStatus objects."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.ISCSIVolumeSource": {
      "required": [
        "targetPortal", 
        "iqn", 
        "lun"
      ], 
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "targetPortal": {
          "type": "string", 
          "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
        }, 
        "iqn": {
          "type": "string", 
          "description": "Target iSCSI Qualified Name."
        }, 
        "iscsiInterface": {
          "type": "string", 
          "description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
        }, 
        "lun": {
          "type": "integer", 
          "description": "iSCSI target lun number.", 
          "format": "int32"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi"
        }
      }
    }, 
    "v1.HorizontalPodAutoscaler": {
      "description": "configuration of a horizontal pod autoscaler.", 
      "properties": {
        "status": {
          "description": "current information about the autoscaler.", 
          "$ref": "#/definitions/v1.HorizontalPodAutoscalerStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "behaviour of autoscaler. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/v1.HorizontalPodAutoscalerSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.", 
      "properties": {
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.", 
          "$ref": "#/definitions/v1.HTTPGetAction"
        }, 
        "timeoutSeconds": {
          "type": "integer", 
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes", 
          "format": "int32"
        }, 
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.", 
          "$ref": "#/definitions/v1.ExecAction"
        }, 
        "initialDelaySeconds": {
          "type": "integer", 
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes", 
          "format": "int32"
        }, 
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported", 
          "$ref": "#/definitions/v1.TCPSocketAction"
        }, 
        "periodSeconds": {
          "type": "integer", 
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.", 
          "format": "int32"
        }, 
        "successThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.", 
          "format": "int32"
        }, 
        "failureThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.DeploymentStatus": {
      "description": "DeploymentStatus is the most recently observed status of the Deployment.", 
      "properties": {
        "updatedReplicas": {
          "type": "integer", 
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec.", 
          "format": "int32"
        }, 
        "availableReplicas": {
          "type": "integer", 
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "The generation observed by the deployment controller.", 
          "format": "int64"
        }, 
        "unavailableReplicas": {
          "type": "integer", 
          "description": "Total number of unavailable pods targeted by this deployment.", 
          "format": "int32"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1beta1.DeploymentCondition"
          }, 
          "type": "array", 
          "description": "Represents the latest available observations of a deployment's current state."
        }
      }
    }, 
    "v1beta1.APIVersion": {
      "description": "An APIVersion represents a single concrete version of an object model.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of this version (e.g. 'v1')."
        }
      }
    }, 
    "v1alpha1.CertificateSigningRequest": {
      "description": "Describes a certificate signing request", 
      "properties": {
        "status": {
          "description": "Derived information about the request.", 
          "$ref": "#/definitions/v1alpha1.CertificateSigningRequestStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "The certificate request itself and any additional information.", 
          "$ref": "#/definitions/v1alpha1.CertificateSigningRequestSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.CinderVolumeSource": {
      "required": [
        "volumeID"
      ], 
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        }, 
        "volumeID": {
          "type": "string", 
          "description": "volume id used to identify the volume in cinder More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        }
      }
    }, 
    "v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.", 
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Hard is the set of enforced hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota"
        }, 
        "used": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Used is the current observed total usage of the resource in the namespace."
        }
      }
    }, 
    "v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes", 
      "properties": {
        "volumeName": {
          "type": "string", 
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
        }, 
        "selector": {
          "description": "A label query over volumes to consider for binding.", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }, 
        "resources": {
          "description": "Resources represents the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources", 
          "$ref": "#/definitions/v1.ResourceRequirements"
        }, 
        "accessModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "AccessModes contains the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1"
        }
      }
    }, 
    "v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }
      }
    }, 
    "runtime.RawExtension": {
      "required": [
        "Raw"
      ], 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)", 
      "properties": {
        "Raw": {
          "type": "string", 
          "description": "Raw is the underlying serialization of this object.", 
          "format": "byte"
        }
      }
    }, 
    "v1beta1.DaemonSetSpec": {
      "required": [
        "template"
      ], 
      "description": "DaemonSetSpec is the specification of a daemon set.", 
      "properties": {
        "template": {
          "description": "Template is the object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: http://kubernetes.io/docs/user-guide/replication-controller#pod-template", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1.ScaleStatus": {
      "required": [
        "replicas"
      ], 
      "description": "ScaleStatus represents the current status of a scale subresource.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "actual number of observed instances of the scaled object.", 
          "format": "int32"
        }, 
        "selector": {
          "type": "string", 
          "description": "label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors"
        }
      }
    }, 
    "v1.EndpointPort": {
      "required": [
        "port"
      ], 
      "description": "EndpointPort is a tuple that describes a single port.", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "The IP protocol for this port. Must be UDP or TCP. Default is TCP."
        }, 
        "name": {
          "type": "string", 
          "description": "The name of this port (corresponds to ServicePort.Name). Must be a DNS_LABEL. Optional only if one port is defined."
        }, 
        "port": {
          "type": "integer", 
          "description": "The port number of the endpoint.", 
          "format": "int32"
        }
      }
    }, 
    "v1.ServiceList": {
      "required": [
        "items"
      ], 
      "description": "ServiceList holds a list of services.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Service"
          }, 
          "type": "array", 
          "description": "List of services"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "unversioned.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body."
    }, 
    "v1beta1.DeploymentStrategy": {
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.", 
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.", 
          "$ref": "#/definitions/v1beta1.RollingUpdateDeployment"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate."
        }
      }
    }, 
    "v1.ContainerStateTerminated": {
      "required": [
        "exitCode"
      ], 
      "description": "ContainerStateTerminated is a terminated state of a container.", 
      "properties": {
        "reason": {
          "type": "string", 
          "description": "(brief) reason from the last termination of the container"
        }, 
        "finishedAt": {
          "description": "Time at which the container last terminated", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "containerID": {
          "type": "string", 
          "description": "Container's ID in the format 'docker://<container_id>'"
        }, 
        "startedAt": {
          "description": "Time at which previous execution of the container started", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "signal": {
          "type": "integer", 
          "description": "Signal from the last termination of the container", 
          "format": "int32"
        }, 
        "message": {
          "type": "string", 
          "description": "Message regarding the last termination of the container"
        }, 
        "exitCode": {
          "type": "integer", 
          "description": "Exit status from the last termination of the container", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.TokenReview": {
      "required": [
        "spec"
      ], 
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.", 
          "$ref": "#/definitions/v1beta1.TokenReviewStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated", 
          "$ref": "#/definitions/v1beta1.TokenReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.IngressBackend": {
      "required": [
        "serviceName", 
        "servicePort"
      ], 
      "description": "IngressBackend describes all endpoints for a given service and port.", 
      "properties": {
        "serviceName": {
          "type": "string", 
          "description": "Specifies the name of the referenced service."
        }, 
        "servicePort": {
          "description": "Specifies the port of the referenced service.", 
          "$ref": "#/definitions/intstr.IntOrString"
        }
      }
    }, 
    "v1alpha1.Subject": {
      "required": [
        "kind", 
        "name"
      ], 
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error."
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error."
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the object being referenced."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion holds the API group and version of the referenced object."
        }
      }
    }, 
    "v2alpha1.JobTemplateSpec": {
      "description": "JobTemplateSpec describes the data a Job should have when created from a template", 
      "properties": {
        "spec": {
          "description": "Specification of the desired behavior of the job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v2alpha1.JobSpec"
        }, 
        "metadata": {
          "description": "Standard object's metadata of the jobs created from this template. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.LimitRange": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the limits enforced. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.LimitRangeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.", 
      "properties": {
        "scopes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects."
        }, 
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Hard is the set of desired hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota"
        }
      }
    }, 
    "v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.", 
      "properties": {
        "finalizers": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: http://releases.k8s.io/HEAD/docs/design/namespaces.md#finalizers"
        }
      }
    }, 
    "v1.CephFSVolumeSource": {
      "required": [
        "monitors"
      ], 
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "secretRef": {
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it", 
          "$ref": "#/definitions/v1.LocalObjectReference"
        }, 
        "secretFile": {
          "type": "string", 
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "user": {
          "type": "string", 
          "description": "Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "path": {
          "type": "string", 
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "monitors": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
        }
      }
    }, 
    "v1beta1.Ingress": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.", 
      "properties": {
        "status": {
          "description": "Status is the current state of the Ingress. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.IngressStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec is the desired state of the Ingress. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.IngressSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v2alpha1.JobCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "JobCondition describes current state of a job.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason for the condition's last transition."
        }, 
        "lastProbeTime": {
          "description": "Last time the condition was checked.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of job condition, Complete or Failed."
        }, 
        "message": {
          "type": "string", 
          "description": "Human readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.", 
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present.", 
          "$ref": "#/definitions/v1.LoadBalancerStatus"
        }
      }
    }, 
    "v1.AzureDiskVolumeSource": {
      "required": [
        "diskName", 
        "diskURI"
      ], 
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.", 
      "properties": {
        "diskURI": {
          "type": "string", 
          "description": "The URI the data disk in the blob storage"
        }, 
        "diskName": {
          "type": "string", 
          "description": "The Name of the data disk in the blob storage"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "cachingMode": {
          "type": "string", 
          "description": "Host Caching mode: None, Read Only, Read Write."
        }
      }
    }, 
    "v1beta1.SubjectAccessReviewStatus": {
      "required": [
        "allowed"
      ], 
      "description": "SubjectAccessReviewStatus", 
      "properties": {
        "reason": {
          "type": "string", 
          "description": "Reason is optional.  It indicates why a request was allowed or denied."
        }, 
        "evaluationError": {
          "type": "string", 
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request."
        }, 
        "allowed": {
          "type": "boolean", 
          "description": "Allowed is required.  True if the action would be allowed, false otherwise."
        }
      }
    }, 
    "v1.EventList": {
      "required": [
        "items"
      ], 
      "description": "EventList is a list of events.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Event"
          }, 
          "type": "array", 
          "description": "List of events"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.Node": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.NodeStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the behavior of a node. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.NodeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "unversioned.GroupVersionForDiscovery": {
      "required": [
        "groupVersion", 
        "version"
      ], 
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.", 
      "properties": {
        "groupVersion": {
          "type": "string", 
          "description": "groupVersion specifies the API group and version in the form \"group/version\""
        }, 
        "version": {
          "type": "string", 
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion."
        }
      }
    }, 
    "v1.PersistentVolumeClaimList": {
      "required": [
        "items"
      ], 
      "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeClaim"
          }, 
          "type": "array", 
          "description": "A list of persistent volume claims. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.StorageClass": {
      "required": [
        "provisioner"
      ], 
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "parameters": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Parameters holds the parameters for the provisioner that should create volumes of this storage class."
        }, 
        "provisioner": {
          "type": "string", 
          "description": "Provisioner indicates the type of the provisioner."
        }
      }
    }, 
    "v1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.", 
      "properties": {
        "failed": {
          "type": "integer", 
          "description": "Failed is the number of pods which reached Phase Failed.", 
          "format": "int32"
        }, 
        "completionTime": {
          "description": "CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "startTime": {
          "description": "StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "succeeded": {
          "type": "integer", 
          "description": "Succeeded is the number of pods which reached Phase Succeeded.", 
          "format": "int32"
        }, 
        "active": {
          "type": "integer", 
          "description": "Active is the number of actively running pods.", 
          "format": "int32"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1.JobCondition"
          }, 
          "type": "array", 
          "description": "Conditions represent the latest available observations of an object's current state. More info: http://kubernetes.io/docs/user-guide/jobs"
        }
      }
    }, 
    "v1.PersistentVolumeSpec": {
      "description": "PersistentVolumeSpec is the specification of a persistent volume.", 
      "properties": {
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine", 
          "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
        }, 
        "persistentVolumeReclaimPolicy": {
          "type": "string", 
          "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#recycling-policy"
        }, 
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.", 
          "$ref": "#/definitions/v1.AzureDiskVolumeSource"
        }, 
        "accessModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "AccessModes contains all ways the volume can be mounted. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes"
        }, 
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md", 
          "$ref": "#/definitions/v1.GlusterfsVolumeSource"
        }, 
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.", 
          "$ref": "#/definitions/v1.FCVolumeSource"
        }, 
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md", 
          "$ref": "#/definitions/v1.CinderVolumeSource"
        }, 
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running", 
          "$ref": "#/definitions/v1.FlockerVolumeSource"
        }, 
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime", 
          "$ref": "#/definitions/v1.CephFSVolumeSource"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "A description of the persistent volume's resources and capacity. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#capacity"
        }, 
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
          "$ref": "#/definitions/v1.AzureFileVolumeSource"
        }, 
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime", 
          "$ref": "#/definitions/v1.QuobyteVolumeSource"
        }, 
        "claimRef": {
          "description": "ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#binding", 
          "$ref": "#/definitions/v1.ObjectReference"
        }, 
        "hostPath": {
          "description": "HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath", 
          "$ref": "#/definitions/v1.HostPathVolumeSource"
        }, 
        "nfs": {
          "description": "NFS represents an NFS mount on the host. Provisioned by an admin. More info: http://kubernetes.io/docs/user-guide/volumes#nfs", 
          "$ref": "#/definitions/v1.NFSVolumeSource"
        }, 
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk", 
          "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
        }, 
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.", 
          "$ref": "#/definitions/v1.FlexVolumeSource"
        }, 
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore", 
          "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
        }, 
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md", 
          "$ref": "#/definitions/v1.RBDVolumeSource"
        }, 
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.", 
          "$ref": "#/definitions/v1.ISCSIVolumeSource"
        }, 
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine", 
          "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
        }
      }
    }, 
    "v1beta1.SubjectAccessReviewSpec": {
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set", 
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "type": "object", 
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here."
        }, 
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request", 
          "$ref": "#/definitions/v1beta1.NonResourceAttributes"
        }, 
        "group": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Groups is the groups you're testing for."
        }, 
        "user": {
          "type": "string", 
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups"
        }, 
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request", 
          "$ref": "#/definitions/v1beta1.ResourceAttributes"
        }
      }
    }, 
    "v1beta1.ReplicaSetStatus": {
      "required": [
        "replicas"
      ], 
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.", 
      "properties": {
        "availableReplicas": {
          "type": "integer", 
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the most recently oberved number of replicas. More info: http://kubernetes.io/docs/user-guide/replication-controller#what-is-a-replication-controller", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.", 
          "format": "int64"
        }, 
        "readyReplicas": {
          "type": "integer", 
          "description": "The number of ready replicas for this replica set.", 
          "format": "int32"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1beta1.ReplicaSetCondition"
          }, 
          "type": "array", 
          "description": "Represents the latest available observations of a replica set's current state."
        }, 
        "fullyLabeledReplicas": {
          "type": "integer", 
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.", 
          "format": "int32"
        }
      }
    }, 
    "v1alpha1.PolicyRule": {
      "required": [
        "verbs"
      ], 
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.", 
      "properties": {
        "resourceNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed."
        }, 
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds."
        }, 
        "nonResourceURLs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both."
        }, 
        "attributeRestrictions": {
          "description": "AttributeRestrictions will vary depending on what the Authorizer/AuthorizationAttributeBuilder pair supports. If the Authorizer does not recognize how to handle the AttributeRestrictions, the Authorizer should report an error.", 
          "$ref": "#/definitions/runtime.RawExtension"
        }, 
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed."
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources."
        }
      }
    }, 
    "v1.ConfigMapKeySelector": {
      "required": [
        "key"
      ], 
      "description": "Selects a key from a ConfigMap.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "key": {
          "type": "string", 
          "description": "The key to select."
        }
      }
    }, 
    "v1.HostPathVolumeSource": {
      "required": [
        "path"
      ], 
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath"
        }
      }
    }, 
    "v1.PersistentVolumeList": {
      "required": [
        "items"
      ], 
      "description": "PersistentVolumeList is a list of PersistentVolume items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.PersistentVolume"
          }, 
          "type": "array", 
          "description": "List of persistent volumes. More info: http://kubernetes.io/docs/user-guide/persistent-volumes"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.JobSpec": {
      "required": [
        "template"
      ], 
      "description": "JobSpec describes how the job execution will look like.", 
      "properties": {
        "activeDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer", 
          "format": "int64"
        }, 
        "parallelism": {
          "type": "integer", 
          "description": "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "format": "int32"
        }, 
        "completions": {
          "type": "integer", 
          "description": "Completions specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "format": "int32"
        }, 
        "manualSelector": {
          "type": "boolean", 
          "description": "ManualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created when executing a job. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that should match the pod count. Normally, the system sets this field for you. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v2alpha1.CronJobList": {
      "required": [
        "items"
      ], 
      "description": "CronJobList is a collection of cron jobs.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v2alpha1.CronJob"
          }, 
          "type": "array", 
          "description": "Items is the list of CronJob."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.Endpoints": {
      "required": [
        "subsets"
      ], 
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n  Name: \"mysvc\",\n  Subsets: [\n    {\n      Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      Addresses: [{\"ip\": \"10.10.3.3\"}],\n      Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "subsets": {
          "items": {
            "$ref": "#/definitions/v1.EndpointSubset"
          }, 
          "type": "array", 
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.SelfSubjectAccessReviewSpec": {
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set", 
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request", 
          "$ref": "#/definitions/v1beta1.NonResourceAttributes"
        }, 
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request", 
          "$ref": "#/definitions/v1beta1.ResourceAttributes"
        }
      }
    }, 
    "v1beta1.ScaleStatus": {
      "required": [
        "replicas"
      ], 
      "description": "represents the current status of a scale subresource.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "actual number of observed instances of the scaled object.", 
          "format": "int32"
        }, 
        "targetSelector": {
          "type": "string", 
          "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors"
        }, 
        "selector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors"
        }
      }
    }, 
    "v2alpha1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.", 
      "properties": {
        "failed": {
          "type": "integer", 
          "description": "Failed is the number of pods which reached Phase Failed.", 
          "format": "int32"
        }, 
        "completionTime": {
          "description": "CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "startTime": {
          "description": "StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "succeeded": {
          "type": "integer", 
          "description": "Succeeded is the number of pods which reached Phase Succeeded.", 
          "format": "int32"
        }, 
        "active": {
          "type": "integer", 
          "description": "Active is the number of actively running pods.", 
          "format": "int32"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v2alpha1.JobCondition"
          }, 
          "type": "array", 
          "description": "Conditions represent the latest available observations of an object's current state. More info: http://kubernetes.io/docs/user-guide/jobs"
        }
      }
    }, 
    "v1.JobList": {
      "required": [
        "items"
      ], 
      "description": "JobList is a collection of jobs.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Job"
          }, 
          "type": "array", 
          "description": "Items is the list of Job."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.", 
      "properties": {
        "message": {
          "type": "string", 
          "description": "Message regarding why the container is not yet running."
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason the container is not yet running."
        }
      }
    }, 
    "v1alpha1.CertificateSigningRequestSpec": {
      "required": [
        "request"
      ], 
      "description": "This information is immutable after the request is created. Only the Request and ExtraInfo fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.", 
      "properties": {
        "username": {
          "type": "string", 
          "description": "Information about the requesting user (if relevant) See user.Info interface for details"
        }, 
        "request": {
          "type": "string", 
          "description": "Base64-encoded PKCS#10 CSR data", 
          "format": "byte"
        }, 
        "uid": {
          "type": "string"
        }, 
        "groups": {
          "items": {
            "type": "string"
          }, 
          "type": "array"
        }
      }
    }, 
    "v1.PodTemplateList": {
      "required": [
        "items"
      ], 
      "description": "PodTemplateList is a list of PodTemplates.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.PodTemplate"
          }, 
          "type": "array", 
          "description": "List of pod templates"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.", 
      "properties": {
        "phase": {
          "type": "string", 
          "description": "Phase represents the current phase of PersistentVolumeClaim."
        }, 
        "accessModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Represents the actual resources of the underlying volume."
        }
      }
    }, 
    "v1alpha1.CertificateSigningRequestList": {
      "required": [
        "items"
      ], 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.CertificateSigningRequest"
          }, 
          "type": "array"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.OwnerReference": {
      "required": [
        "apiVersion", 
        "kind", 
        "name", 
        "uid"
      ], 
      "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.", 
      "properties": {
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent."
        }, 
        "controller": {
          "type": "boolean", 
          "description": "If true, this reference points to the managing controller."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }
      }
    }, 
    "v1beta1.ScaleSpec": {
      "description": "describes the attributes of a scale subresource", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "desired number of instances for the scaled object.", 
          "format": "int32"
        }
      }
    }, 
    "v1.GitRepoVolumeSource": {
      "required": [
        "repository"
      ], 
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.", 
      "properties": {
        "directory": {
          "type": "string", 
          "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
        }, 
        "repository": {
          "type": "string", 
          "description": "Repository URL"
        }, 
        "revision": {
          "type": "string", 
          "description": "Commit hash for the specified revision."
        }
      }
    }, 
    "v1beta1.NetworkPolicy": {
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior for this NetworkPolicy.", 
          "$ref": "#/definitions/v1beta1.NetworkPolicySpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.ContainerImage": {
      "required": [
        "names"
      ], 
      "description": "Describe a container image", 
      "properties": {
        "sizeBytes": {
          "type": "integer", 
          "description": "The size of the image in bytes.", 
          "format": "int64"
        }, 
        "names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Names by which this image is known. e.g. [\"gcr.io/google_containers/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]"
        }
      }
    }, 
    "v1.EnvVar": {
      "required": [
        "name"
      ], 
      "description": "EnvVar represents an environment variable present in a Container.", 
      "properties": {
        "valueFrom": {
          "description": "Source for the environment variable's value. Cannot be used if value is not empty.", 
          "$ref": "#/definitions/v1.EnvVarSource"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the environment variable. Must be a C_IDENTIFIER."
        }, 
        "value": {
          "type": "string", 
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
        }
      }
    }, 
    "v1.LimitRangeSpec": {
      "required": [
        "limits"
      ], 
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.", 
      "properties": {
        "limits": {
          "items": {
            "$ref": "#/definitions/v1.LimitRangeItem"
          }, 
          "type": "array", 
          "description": "Limits is the list of LimitRangeItem objects that are enforced."
        }
      }
    }, 
    "v1alpha1.Role": {
      "required": [
        "rules"
      ], 
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/v1alpha1.PolicyRule"
          }, 
          "type": "array", 
          "description": "Rules holds all the PolicyRules for this Role"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.ComponentCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "Information about the condition of a component.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\"."
        }, 
        "message": {
          "type": "string", 
          "description": "Message about the condition for a component. For example, information about a health check."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of condition for a component. Valid value: \"Healthy\""
        }, 
        "error": {
          "type": "string", 
          "description": "Condition error code for a component. For example, a health check error code."
        }
      }
    }, 
    "v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.", 
      "properties": {
        "runAsNonRoot": {
          "type": "boolean", 
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }, 
        "readOnlyRootFilesystem": {
          "type": "boolean", 
          "description": "Whether this container has a read-only root filesystem. Default is false."
        }, 
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.", 
          "$ref": "#/definitions/v1.SELinuxOptions"
        }, 
        "runAsUser": {
          "type": "integer", 
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.", 
          "format": "int64"
        }, 
        "privileged": {
          "type": "boolean", 
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
        }, 
        "capabilities": {
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.", 
          "$ref": "#/definitions/v1.Capabilities"
        }
      }
    }, 
    "v1beta1.StatefulSetSpec": {
      "required": [
        "template", 
        "serviceName"
      ], 
      "description": "A StatefulSetSpec is the specification of a StatefulSet.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.", 
          "format": "int32"
        }, 
        "serviceName": {
          "type": "string", 
          "description": "ServiceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller."
        }, 
        "volumeClaimTemplates": {
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeClaim"
          }, 
          "type": "array", 
          "description": "VolumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name."
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1.AWSElasticBlockStoreVolumeSource": {
      "required": [
        "volumeID"
      ], 
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
        }, 
        "partition": {
          "type": "integer", 
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).", 
          "format": "int32"
        }, 
        "volumeID": {
          "type": "string", 
          "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
        }
      }
    }, 
    "v1beta1.ReplicaSet": {
      "description": "ReplicaSet represents the configuration of a ReplicaSet.", 
      "properties": {
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.ReplicaSetStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.ReplicaSetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.EndpointAddress": {
      "required": [
        "ip"
      ], 
      "description": "EndpointAddress is a tuple that describes single IP address.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready."
        }, 
        "hostname": {
          "type": "string", 
          "description": "The Hostname of this endpoint"
        }, 
        "nodeName": {
          "type": "string", 
          "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node."
        }, 
        "targetRef": {
          "description": "Reference to object providing the endpoint.", 
          "$ref": "#/definitions/v1.ObjectReference"
        }
      }
    }, 
    "v1beta1.SelfSubjectAccessReview": {
      "required": [
        "spec"
      ], 
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not", 
          "$ref": "#/definitions/v1beta1.SubjectAccessReviewStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty", 
          "$ref": "#/definitions/v1beta1.SelfSubjectAccessReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.DaemonSet": {
      "description": "DaemonSet represents the configuration of a daemon set.", 
      "properties": {
        "status": {
          "description": "Status is the current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.DaemonSetStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the desired behavior of this daemon set. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.DaemonSetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v2alpha1.CronJobStatus": {
      "description": "CronJobStatus represents the current state of a cron job.", 
      "properties": {
        "active": {
          "items": {
            "$ref": "#/definitions/v1.ObjectReference"
          }, 
          "type": "array", 
          "description": "Active holds pointers to currently running jobs."
        }, 
        "lastScheduleTime": {
          "description": "LastScheduleTime keeps information of when was the last time the job was successfully scheduled.", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1beta1.DaemonSetList": {
      "required": [
        "items"
      ], 
      "description": "DaemonSetList is a collection of daemon sets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.DaemonSet"
          }, 
          "type": "array", 
          "description": "Items is a list of daemon sets."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.RBDVolumeSource": {
      "required": [
        "monitors", 
        "image"
      ], 
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "secretRef": {
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it", 
          "$ref": "#/definitions/v1.LocalObjectReference"
        }, 
        "image": {
          "type": "string", 
          "description": "The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
        }, 
        "keyring": {
          "type": "string", 
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
        }, 
        "user": {
          "type": "string", 
          "description": "The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
        }, 
        "monitors": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
        }, 
        "pool": {
          "type": "string", 
          "description": "The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it."
        }
      }
    }, 
    "v1beta1.StatefulSetStatus": {
      "required": [
        "replicas"
      ], 
      "description": "StatefulSetStatus represents the current state of a StatefulSet.", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "most recent generation observed by this autoscaler.", 
          "format": "int64"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the number of actual replicas.", 
          "format": "int32"
        }
      }
    }, 
    "v1.Volume": {
      "required": [
        "name"
      ], 
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.", 
      "properties": {
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine", 
          "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
        }, 
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.", 
          "$ref": "#/definitions/v1.AzureDiskVolumeSource"
        }, 
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md", 
          "$ref": "#/definitions/v1.GlusterfsVolumeSource"
        }, 
        "gitRepo": {
          "description": "GitRepo represents a git repository at a particular revision.", 
          "$ref": "#/definitions/v1.GitRepoVolumeSource"
        }, 
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md", 
          "$ref": "#/definitions/v1.CinderVolumeSource"
        }, 
        "emptyDir": {
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir", 
          "$ref": "#/definitions/v1.EmptyDirVolumeSource"
        }, 
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running", 
          "$ref": "#/definitions/v1.FlockerVolumeSource"
        }, 
        "persistentVolumeClaim": {
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims", 
          "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
        }, 
        "configMap": {
          "description": "ConfigMap represents a configMap that should populate this volume", 
          "$ref": "#/definitions/v1.ConfigMapVolumeSource"
        }, 
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md", 
          "$ref": "#/definitions/v1.RBDVolumeSource"
        }, 
        "name": {
          "type": "string", 
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md", 
          "$ref": "#/definitions/v1.ISCSIVolumeSource"
        }, 
        "downwardAPI": {
          "description": "DownwardAPI represents downward API about the pod that should populate this volume", 
          "$ref": "#/definitions/v1.DownwardAPIVolumeSource"
        }, 
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime", 
          "$ref": "#/definitions/v1.QuobyteVolumeSource"
        }, 
        "secret": {
          "description": "Secret represents a secret that should populate this volume. More info: http://kubernetes.io/docs/user-guide/volumes#secrets", 
          "$ref": "#/definitions/v1.SecretVolumeSource"
        }, 
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.", 
          "$ref": "#/definitions/v1.FCVolumeSource"
        }, 
        "nfs": {
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://kubernetes.io/docs/user-guide/volumes#nfs", 
          "$ref": "#/definitions/v1.NFSVolumeSource"
        }, 
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk", 
          "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
        }, 
        "hostPath": {
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath", 
          "$ref": "#/definitions/v1.HostPathVolumeSource"
        }, 
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.", 
          "$ref": "#/definitions/v1.FlexVolumeSource"
        }, 
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore", 
          "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
        }, 
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime", 
          "$ref": "#/definitions/v1.CephFSVolumeSource"
        }, 
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
          "$ref": "#/definitions/v1.AzureFileVolumeSource"
        }, 
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine", 
          "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
        }
      }
    }, 
    "v1beta1.PodDisruptionBudgetList": {
      "required": [
        "items"
      ], 
      "description": "PodDisruptionBudgetList is a collection of PodDisruptionBudgets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.PodDisruptionBudget"
          }, 
          "type": "array"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.VolumeMount": {
      "required": [
        "name", 
        "mountPath"
      ], 
      "description": "VolumeMount describes a mounting of a Volume within a container.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
        }, 
        "mountPath": {
          "type": "string", 
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
        }, 
        "subPath": {
          "type": "string", 
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
        }, 
        "name": {
          "type": "string", 
          "description": "This must match the Name of a Volume."
        }
      }
    }, 
    "v1.NamespaceList": {
      "required": [
        "items"
      ], 
      "description": "NamespaceList is a list of Namespaces.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Namespace"
          }, 
          "type": "array", 
          "description": "Items is the list of Namespace objects in the list. More info: http://kubernetes.io/docs/user-guide/namespaces"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1alpha1.ClusterRoleBinding": {
      "required": [
        "subjects", 
        "roleRef"
      ], 
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.", 
      "properties": {
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.", 
          "$ref": "#/definitions/v1alpha1.RoleRef"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "subjects": {
          "items": {
            "$ref": "#/definitions/v1alpha1.Subject"
          }, 
          "type": "array", 
          "description": "Subjects holds references to the objects the role applies to."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.HorizontalPodAutoscalerList": {
      "required": [
        "items"
      ], 
      "description": "list of horizontal pod autoscaler objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.HorizontalPodAutoscaler"
          }, 
          "type": "array", 
          "description": "list of horizontal pod autoscaler objects."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "unversioned.ServerAddressByClientCIDR": {
      "required": [
        "clientCIDR", 
        "serverAddress"
      ], 
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.", 
      "properties": {
        "clientCIDR": {
          "type": "string", 
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use."
        }, 
        "serverAddress": {
          "type": "string", 
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port."
        }
      }
    }, 
    "v1alpha1.CertificateSigningRequestCondition": {
      "required": [
        "type"
      ], 
      "properties": {
        "message": {
          "type": "string", 
          "description": "human readable message with details about the request state"
        }, 
        "type": {
          "type": "string", 
          "description": "request approval state, currently Approved or Denied."
        }, 
        "reason": {
          "type": "string", 
          "description": "brief reason for the request state"
        }, 
        "lastUpdateTime": {
          "description": "timestamp for the last update to this condition", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1.Container": {
      "required": [
        "name"
      ], 
      "description": "A single application container that you want to run within a pod.", 
      "properties": {
        "livenessProbe": {
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes", 
          "$ref": "#/definitions/v1.Probe"
        }, 
        "terminationMessagePath": {
          "type": "string", 
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated."
        }, 
        "workingDir": {
          "type": "string", 
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
        }, 
        "image": {
          "type": "string", 
          "description": "Docker image name. More info: http://kubernetes.io/docs/user-guide/images"
        }, 
        "args": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands"
        }, 
        "volumeMounts": {
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          }, 
          "type": "array", 
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated."
        }, 
        "tty": {
          "type": "boolean", 
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
        }, 
        "lifecycle": {
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.", 
          "$ref": "#/definitions/v1.Lifecycle"
        }, 
        "securityContext": {
          "description": "Security options the pod should run with. More info: http://releases.k8s.io/HEAD/docs/design/security_context.md", 
          "$ref": "#/definitions/v1.SecurityContext"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
        }, 
        "stdin": {
          "type": "boolean", 
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
        }, 
        "stdinOnce": {
          "type": "boolean", 
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
        }, 
        "command": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands"
        }, 
        "env": {
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          }, 
          "type": "array", 
          "description": "List of environment variables to set in the container. Cannot be updated."
        }, 
        "imagePullPolicy": {
          "type": "string", 
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images"
        }, 
        "readinessProbe": {
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes", 
          "$ref": "#/definitions/v1.Probe"
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          }, 
          "type": "array", 
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated."
        }, 
        "resources": {
          "description": "Compute Resources required by this container. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources", 
          "$ref": "#/definitions/v1.ResourceRequirements"
        }
      }
    }, 
    "v1alpha1.RoleList": {
      "required": [
        "items"
      ], 
      "description": "RoleList is a collection of Roles", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.Role"
          }, 
          "type": "array", 
          "description": "Items is a list of Roles"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.VsphereVirtualDiskVolumeSource": {
      "required": [
        "volumePath"
      ], 
      "description": "Represents a vSphere volume resource.", 
      "properties": {
        "volumePath": {
          "type": "string", 
          "description": "Path that identifies vSphere volume vmdk"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "v1.NodeList": {
      "required": [
        "items"
      ], 
      "description": "NodeList is the whole list of all Nodes which have been registered with master.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Node"
          }, 
          "type": "array", 
          "description": "List of nodes"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "medium": {
          "type": "string", 
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
        }
      }
    }, 
    "v1.TCPSocketAction": {
      "required": [
        "port"
      ], 
      "description": "TCPSocketAction describes an action based on opening a socket", 
      "properties": {
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.", 
          "$ref": "#/definitions/intstr.IntOrString"
        }
      }
    }, 
    "v1beta1.ReplicaSetList": {
      "required": [
        "items"
      ], 
      "description": "ReplicaSetList is a collection of ReplicaSets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.ReplicaSet"
          }, 
          "type": "array", 
          "description": "List of ReplicaSets. More info: http://kubernetes.io/docs/user-guide/replication-controller"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.DeploymentCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "DeploymentCondition describes the state of a deployment at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }, 
        "lastUpdateTime": {
          "description": "The last time this condition was updated.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of deployment condition."
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1beta1.StatefulSetList": {
      "required": [
        "items"
      ], 
      "description": "StatefulSetList is a collection of StatefulSets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.StatefulSet"
          }, 
          "type": "array"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        }, 
        {
          "type": "integer"
        }
      ]
    }, 
    "v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.", 
      "properties": {
        "terminated": {
          "description": "Details about a terminated container", 
          "$ref": "#/definitions/v1.ContainerStateTerminated"
        }, 
        "running": {
          "description": "Details about a running container", 
          "$ref": "#/definitions/v1.ContainerStateRunning"
        }, 
        "waiting": {
          "description": "Details about a waiting container", 
          "$ref": "#/definitions/v1.ContainerStateWaiting"
        }
      }
    }, 
    "v1.PodStatus": {
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system.", 
      "properties": {
        "containerStatuses": {
          "items": {
            "$ref": "#/definitions/v1.ContainerStatus"
          }, 
          "type": "array", 
          "description": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: http://kubernetes.io/docs/user-guide/pod-states#container-statuses"
        }, 
        "reason": {
          "type": "string", 
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'OutOfDisk'"
        }, 
        "podIP": {
          "type": "string", 
          "description": "IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated."
        }, 
        "startTime": {
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "hostIP": {
          "type": "string", 
          "description": "IP address of the host to which the pod is assigned. Empty if not yet scheduled."
        }, 
        "phase": {
          "type": "string", 
          "description": "Current condition of the pod. More info: http://kubernetes.io/docs/user-guide/pod-states#pod-phase"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about why the pod is in this condition."
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1.PodCondition"
          }, 
          "type": "array", 
          "description": "Current service state of pod. More info: http://kubernetes.io/docs/user-guide/pod-states#pod-conditions"
        }
      }
    }, 
    "v1beta1.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: http://kubernetes.io/docs/user-guide/replication-controller#what-is-a-replication-controller", 
          "format": "int32"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: http://kubernetes.io/docs/user-guide/replication-controller#pod-template", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1.AttachedVolume": {
      "required": [
        "name", 
        "devicePath"
      ], 
      "description": "AttachedVolume describes a volume attached to a node", 
      "properties": {
        "devicePath": {
          "type": "string", 
          "description": "DevicePath represents the device path where the volume should be available"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the attached volume"
        }
      }
    }, 
    "v1.PersistentVolume": {
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: http://kubernetes.io/docs/user-guide/persistent-volumes", 
      "properties": {
        "status": {
          "description": "Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistent-volumes", 
          "$ref": "#/definitions/v1.PersistentVolumeStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistent-volumes", 
          "$ref": "#/definitions/v1.PersistentVolumeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.LimitRangeList": {
      "required": [
        "items"
      ], 
      "description": "LimitRangeList is a list of LimitRange items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.LimitRange"
          }, 
          "type": "array", 
          "description": "Items is a list of LimitRange objects. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_limit_range.md"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "unversioned.Status": {
      "description": "Status is a return value for calls that don't return other objects.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "code": {
          "type": "integer", 
          "description": "Suggested HTTP return code for this status, 0 if not set.", 
          "format": "int32"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "reason": {
          "type": "string", 
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
        }, 
        "details": {
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.", 
          "$ref": "#/definitions/unversioned.StatusDetails"
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable description of the status of this operation."
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1alpha1.ClusterRoleList": {
      "required": [
        "items"
      ], 
      "description": "ClusterRoleList is a collection of ClusterRoles", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterRole"
          }, 
          "type": "array", 
          "description": "Items is a list of ClusterRoles"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v2alpha1.Job": {
      "description": "Job represents the configuration of a single job.", 
      "properties": {
        "status": {
          "description": "Status is a structure describing current status of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v2alpha1.JobStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec is a structure defining the expected behavior of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v2alpha1.JobSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.Service": {
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.ServiceStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the behavior of a service. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.ServiceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.ObjectFieldSelector": {
      "required": [
        "fieldPath"
      ], 
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
      "properties": {
        "fieldPath": {
          "type": "string", 
          "description": "Path of the field to select in the specified API version."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
        }
      }
    }, 
    "unversioned.APIGroup": {
      "required": [
        "name", 
        "versions", 
        "serverAddressByClientCIDRs"
      ], 
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.", 
      "properties": {
        "serverAddressByClientCIDRs": {
          "items": {
            "$ref": "#/definitions/unversioned.ServerAddressByClientCIDR"
          }, 
          "type": "array", 
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the group."
        }, 
        "versions": {
          "items": {
            "$ref": "#/definitions/unversioned.GroupVersionForDiscovery"
          }, 
          "type": "array", 
          "description": "versions are the versions supported in this group."
        }, 
        "preferredVersion": {
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.", 
          "$ref": "#/definitions/unversioned.GroupVersionForDiscovery"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }
      }
    }, 
    "v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.", 
      "properties": {
        "add": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Added capabilities"
        }, 
        "drop": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Removed capabilities"
        }
      }
    }, 
    "v1.DownwardAPIVolumeFile": {
      "required": [
        "path"
      ], 
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
        }, 
        "fieldRef": {
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.", 
          "$ref": "#/definitions/v1.ObjectFieldSelector"
        }, 
        "mode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.", 
          "$ref": "#/definitions/v1.ResourceFieldSelector"
        }
      }
    }, 
    "v1.GCEPersistentDiskVolumeSource": {
      "required": [
        "pdName"
      ], 
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
        }, 
        "partition": {
          "type": "integer", 
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk", 
          "format": "int32"
        }, 
        "pdName": {
          "type": "string", 
          "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
        }
      }
    }, 
    "v1alpha1.ClusterRoleBindingList": {
      "required": [
        "items"
      ], 
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterRoleBinding"
          }, 
          "type": "array", 
          "description": "Items is a list of ClusterRoleBindings"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.PodDisruptionBudgetStatus": {
      "required": [
        "disruptedPods", 
        "disruptionsAllowed", 
        "currentHealthy", 
        "desiredHealthy", 
        "expectedPods"
      ], 
      "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB's object generation.", 
          "format": "int64"
        }, 
        "expectedPods": {
          "type": "integer", 
          "description": "total number of pods counted by this disruption budget", 
          "format": "int32"
        }, 
        "currentHealthy": {
          "type": "integer", 
          "description": "current number of healthy pods", 
          "format": "int32"
        }, 
        "disruptionsAllowed": {
          "type": "integer", 
          "description": "Number of pod disruptions that are currently allowed.", 
          "format": "int32"
        }, 
        "disruptedPods": {
          "additionalProperties": {
            "$ref": "#/definitions/unversioned.Time"
          }, 
          "type": "object", 
          "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions."
        }, 
        "desiredHealthy": {
          "type": "integer", 
          "description": "minimum desired number of healthy pods", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path is the URL path of the request"
        }, 
        "verb": {
          "type": "string", 
          "description": "Verb is the standard HTTP verb"
        }
      }
    }, 
    "v1.JobCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "JobCondition describes current state of a job.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason for the condition's last transition."
        }, 
        "lastProbeTime": {
          "description": "Last time the condition was checked.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of job condition, Complete or Failed."
        }, 
        "message": {
          "type": "string", 
          "description": "Human readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1beta1.Deployment": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the Deployment.", 
          "$ref": "#/definitions/v1beta1.DeploymentStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.", 
          "$ref": "#/definitions/v1beta1.DeploymentSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.Job": {
      "description": "Job represents the configuration of a single job. DEPRECATED: extensions/v1beta1.Job is deprecated, use batch/v1.Job instead.", 
      "properties": {
        "status": {
          "description": "Status is a structure describing current status of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.JobStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec is a structure defining the expected behavior of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1beta1.JobSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.Namespace": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.", 
      "properties": {
        "status": {
          "description": "Status describes the current status of a Namespace. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.NamespaceStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the behavior of the Namespace. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.NamespaceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.NetworkPolicyPeer": {
      "properties": {
        "namespaceSelector": {
          "description": "Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If omitted, this selector selects no namespaces. If present but empty, this selector selects all namespaces.", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }, 
        "podSelector": {
          "description": "This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If not provided, this selector selects no pods. If present but empty, this selector selects all pods in this namespace.", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "versioned.Event": {
      "required": [
        "type", 
        "object"
      ], 
      "description": "Event represents a single event to a watched resource.", 
      "properties": {
        "object": {
          "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.", 
          "$ref": "#/definitions/runtime.RawExtension"
        }, 
        "type": {
          "type": "string"
        }
      }
    }, 
    "v1beta1.ReplicaSetCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of replica set condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }
      }
    }, 
    "v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.", 
      "properties": {
        "runAsNonRoot": {
          "type": "boolean", 
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }, 
        "fsGroup": {
          "type": "integer", 
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.", 
          "format": "int64"
        }, 
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.", 
          "$ref": "#/definitions/v1.SELinuxOptions"
        }, 
        "runAsUser": {
          "type": "integer", 
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.", 
          "format": "int64"
        }, 
        "supplementalGroups": {
          "items": {
            "type": "integer", 
            "format": "int64"
          }, 
          "type": "array", 
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
        }
      }
    }, 
    "v1.ReplicationControllerCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of replication controller condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }
      }
    }, 
    "v1.ResourceQuota": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace", 
      "properties": {
        "status": {
          "description": "Status defines the actual enforced quota and its current usage. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.ResourceQuotaStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the desired quota. http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.ResourceQuotaSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.LimitRangeItem": {
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.", 
      "properties": {
        "defaultRequest": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted."
        }, 
        "min": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Min usage constraints on this kind by resource name."
        }, 
        "default": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Default resource requirement limit value by resource name if resource limit is omitted."
        }, 
        "max": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Max usage constraints on this kind by resource name."
        }, 
        "maxLimitRequestRatio": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of resource that this limit applies to."
        }
      }
    }, 
    "v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          }, 
          "type": "array", 
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'."
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }
      }
    }, 
    "v1.FCVolumeSource": {
      "required": [
        "targetWWNs", 
        "lun"
      ], 
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "targetWWNs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Required: FC target worldwide names (WWNs)"
        }, 
        "lun": {
          "type": "integer", 
          "description": "Required: FC target lun number", 
          "format": "int32"
        }, 
        "fsType": {
          "type": "string", 
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "v1alpha1.RoleBinding": {
      "required": [
        "subjects", 
        "roleRef"
      ], 
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.", 
      "properties": {
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.", 
          "$ref": "#/definitions/v1alpha1.RoleRef"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "subjects": {
          "items": {
            "$ref": "#/definitions/v1alpha1.Subject"
          }, 
          "type": "array", 
          "description": "Subjects holds references to the objects the role applies to."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.PodCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "PodCondition contains details for the current condition of this pod.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: http://kubernetes.io/docs/user-guide/pod-states#pod-conditions"
        }, 
        "reason": {
          "type": "string", 
          "description": "Unique, one-word, CamelCase reason for the condition's last transition."
        }, 
        "lastProbeTime": {
          "description": "Last time we probed the condition.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type is the type of the condition. Currently only Ready. More info: http://kubernetes.io/docs/user-guide/pod-states#pod-conditions"
        }, 
        "message": {
          "type": "string", 
          "description": "Human-readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1.Handler": {
      "description": "Handler defines a specific action that should be taken", 
      "properties": {
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.", 
          "$ref": "#/definitions/v1.HTTPGetAction"
        }, 
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported", 
          "$ref": "#/definitions/v1.TCPSocketAction"
        }, 
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.", 
          "$ref": "#/definitions/v1.ExecAction"
        }
      }
    }, 
    "v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.", 
      "properties": {
        "startedAt": {
          "description": "Time at which the container was last (re-)started", 
          "$ref": "#/definitions/unversioned.Time"
        }
      }
    }, 
    "v1.HorizontalPodAutoscalerSpec": {
      "required": [
        "scaleTargetRef", 
        "maxReplicas"
      ], 
      "description": "specification of a horizontal pod autoscaler.", 
      "properties": {
        "minReplicas": {
          "type": "integer", 
          "description": "lower limit for the number of pods that can be set by the autoscaler, default 1.", 
          "format": "int32"
        }, 
        "scaleTargetRef": {
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.", 
          "$ref": "#/definitions/v1.CrossVersionObjectReference"
        }, 
        "targetCPUUtilizationPercentage": {
          "type": "integer", 
          "description": "target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.", 
          "format": "int32"
        }, 
        "maxReplicas": {
          "type": "integer", 
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.Scale": {
      "description": "represents a scaling request for a resource.", 
      "properties": {
        "status": {
          "description": "current status of the scale. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status. Read-only.", 
          "$ref": "#/definitions/v1beta1.ScaleStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "defines the behavior of the scale. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/v1beta1.ScaleSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.ThirdPartyResourceList": {
      "required": [
        "items"
      ], 
      "description": "ThirdPartyResourceList is a list of ThirdPartyResources.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.ThirdPartyResource"
          }, 
          "type": "array", 
          "description": "Items is the list of ThirdPartyResources."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.DeploymentList": {
      "required": [
        "items"
      ], 
      "description": "DeploymentList is a list of Deployments.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.Deployment"
          }, 
          "type": "array", 
          "description": "Items is the list of Deployments."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.NodeSpec": {
      "description": "NodeSpec describes the attributes that a node is created with.", 
      "properties": {
        "podCIDR": {
          "type": "string", 
          "description": "PodCIDR represents the pod IP range assigned to the node."
        }, 
        "unschedulable": {
          "type": "boolean", 
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: http://releases.k8s.io/HEAD/docs/admin/node.md#manual-node-administration\""
        }, 
        "providerID": {
          "type": "string", 
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>"
        }, 
        "externalID": {
          "type": "string", 
          "description": "External ID of the node assigned by some machine database (e.g. a cloud provider). Deprecated."
        }
      }
    }, 
    "v1beta1.PodDisruptionBudgetSpec": {
      "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.", 
      "properties": {
        "minAvailable": {
          "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".", 
          "$ref": "#/definitions/intstr.IntOrString"
        }, 
        "selector": {
          "description": "Label query over pods whose evictions are managed by the disruption budget.", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          }, 
          "type": "array", 
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'."
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "secretName": {
          "type": "string", 
          "description": "Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets"
        }
      }
    }, 
    "v1.NodeCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "description": "NodeCondition contains condition information for a node.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastHeartbeatTime": {
          "description": "Last time we got an update on a given condition.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of node condition."
        }, 
        "message": {
          "type": "string", 
          "description": "Human readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason for the condition's last transition."
        }
      }
    }, 
    "v1beta1.DeploymentRollback": {
      "required": [
        "name", 
        "rollbackTo"
      ], 
      "description": "DeploymentRollback stores the information required to rollback a deployment.", 
      "properties": {
        "rollbackTo": {
          "description": "The config of this deployment rollback.", 
          "$ref": "#/definitions/v1beta1.RollbackConfig"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "Required: This must match the Name of a deployment."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "updatedAnnotations": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "The annotations to be updated to a deployment"
        }
      }
    }, 
    "unversioned.APIGroupList": {
      "required": [
        "groups"
      ], 
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "groups": {
          "items": {
            "$ref": "#/definitions/unversioned.APIGroup"
          }, 
          "type": "array", 
          "description": "groups is a list of APIGroup."
        }
      }
    }, 
    "v1.PersistentVolumeClaim": {
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume", 
      "properties": {
        "status": {
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims", 
          "$ref": "#/definitions/v1.PersistentVolumeClaimStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims", 
          "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.KeyToPath": {
      "required": [
        "key", 
        "path"
      ], 
      "description": "Maps a string key to a path within a volume.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
        }, 
        "mode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "key": {
          "type": "string", 
          "description": "The key to project."
        }
      }
    }, 
    "unversioned.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
      "properties": {
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
        }, 
        "matchExpressions": {
          "items": {
            "$ref": "#/definitions/unversioned.LabelSelectorRequirement"
          }, 
          "type": "array", 
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
        }
      }
    }, 
    "v1beta1.JobList": {
      "required": [
        "items"
      ], 
      "description": "JobList is a collection of jobs. DEPRECATED: extensions/v1beta1.JobList is deprecated, use batch/v1.JobList instead.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.Job"
          }, 
          "type": "array", 
          "description": "Items is the list of Job."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "intstr.IntOrString": {
      "type": "string", 
      "format": "int-or-string"
    }, 
    "v1beta1.StorageClassList": {
      "required": [
        "items"
      ], 
      "description": "StorageClassList is a collection of storage classes.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.StorageClass"
          }, 
          "type": "array", 
          "description": "Items is the list of StorageClasses"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v2alpha1.CronJobSpec": {
      "required": [
        "schedule", 
        "jobTemplate"
      ], 
      "description": "CronJobSpec describes how the job execution will look like and when it will actually run.", 
      "properties": {
        "jobTemplate": {
          "description": "JobTemplate is the object that describes the job that will be created when executing a CronJob.", 
          "$ref": "#/definitions/v2alpha1.JobTemplateSpec"
        }, 
        "startingDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.", 
          "format": "int64"
        }, 
        "concurrencyPolicy": {
          "type": "string", 
          "description": "ConcurrencyPolicy specifies how to treat concurrent executions of a Job."
        }, 
        "suspend": {
          "type": "boolean", 
          "description": "Suspend flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false."
        }, 
        "schedule": {
          "type": "string", 
          "description": "Schedule contains the schedule in Cron format, see https://en.wikipedia.org/wiki/Cron."
        }
      }
    }, 
    "v1beta1.StatefulSet": {
      "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.", 
      "properties": {
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.", 
          "$ref": "#/definitions/v1beta1.StatefulSetStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.", 
          "$ref": "#/definitions/v1beta1.StatefulSetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.PersistentVolumeStatus": {
      "description": "PersistentVolumeStatus is the current status of a persistent volume.", 
      "properties": {
        "phase": {
          "type": "string", 
          "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#phase"
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable message indicating details about why the volume is in this state."
        }, 
        "reason": {
          "type": "string", 
          "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI."
        }
      }
    }, 
    "v1.ContainerPort": {
      "required": [
        "containerPort"
      ], 
      "description": "ContainerPort represents a network port in a single container.", 
      "properties": {
        "hostIP": {
          "type": "string", 
          "description": "What host IP to bind the external port to."
        }, 
        "protocol": {
          "type": "string", 
          "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
        }, 
        "containerPort": {
          "type": "integer", 
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.", 
          "format": "int32"
        }, 
        "name": {
          "type": "string", 
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
        }, 
        "hostPort": {
          "type": "integer", 
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.HTTPIngressRuleValue": {
      "required": [
        "paths"
      ], 
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.", 
      "properties": {
        "paths": {
          "items": {
            "$ref": "#/definitions/v1beta1.HTTPIngressPath"
          }, 
          "type": "array", 
          "description": "A collection of paths that map requests to backends."
        }
      }
    }, 
    "v1.AzureFileVolumeSource": {
      "required": [
        "secretName", 
        "shareName"
      ], 
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
      "properties": {
        "shareName": {
          "type": "string", 
          "description": "Share Name"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "secretName": {
          "type": "string", 
          "description": "the name of secret that contains Azure Storage Account Name and Key"
        }
      }
    }, 
    "v1beta1.NetworkPolicySpec": {
      "required": [
        "podSelector"
      ], 
      "properties": {
        "ingress": {
          "items": {
            "$ref": "#/definitions/v1beta1.NetworkPolicyIngressRule"
          }, 
          "type": "array", 
          "description": "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if namespace.networkPolicy.ingress.isolation is undefined and cluster policy allows it, OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not affect ingress isolation. If this field is present and contains at least one rule, this policy allows any traffic which matches at least one of the ingress rules in this list."
        }, 
        "podSelector": {
          "description": "Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1.PodTemplateSpec": {
      "description": "PodTemplateSpec describes the data a pod should have when created from a template", 
      "properties": {
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.PodSpec"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.PodSpec": {
      "required": [
        "containers"
      ], 
      "description": "PodSpec is a description of a pod.", 
      "properties": {
        "dnsPolicy": {
          "type": "string", 
          "description": "Set DNS policy for containers within the pod. One of 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\"."
        }, 
        "serviceAccountName": {
          "type": "string", 
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md"
        }, 
        "hostNetwork": {
          "type": "boolean", 
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
        }, 
        "restartPolicy": {
          "type": "string", 
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy"
        }, 
        "hostIPC": {
          "type": "boolean", 
          "description": "Use the host's ipc namespace. Optional: Default to false."
        }, 
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.", 
          "$ref": "#/definitions/v1.PodSecurityContext"
        }, 
        "nodeName": {
          "type": "string", 
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
        }, 
        "hostname": {
          "type": "string", 
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
        }, 
        "serviceAccount": {
          "type": "string", 
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
        }, 
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection/README"
        }, 
        "activeDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.", 
          "format": "int64"
        }, 
        "terminationGracePeriodSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.", 
          "format": "int64"
        }, 
        "hostPID": {
          "type": "boolean", 
          "description": "Use the host's pid namespace. Optional: Default to false."
        }, 
        "volumes": {
          "items": {
            "$ref": "#/definitions/v1.Volume"
          }, 
          "type": "array", 
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: http://kubernetes.io/docs/user-guide/volumes"
        }, 
        "subdomain": {
          "type": "string", 
          "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
        }, 
        "imagePullSecrets": {
          "items": {
            "$ref": "#/definitions/v1.LocalObjectReference"
          }, 
          "type": "array", 
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod"
        }, 
        "containers": {
          "items": {
            "$ref": "#/definitions/v1.Container"
          }, 
          "type": "array", 
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers"
        }
      }
    }, 
    "v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.", 
      "properties": {
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/"
        }, 
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }, 
          "type": "object", 
          "description": "Limits describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/"
        }
      }
    }, 
    "v1beta1.HorizontalPodAutoscalerList": {
      "required": [
        "items"
      ], 
      "description": "list of horizontal pod autoscaler objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.HorizontalPodAutoscaler"
          }, 
          "type": "array", 
          "description": "list of horizontal pod autoscaler objects."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.", 
      "properties": {
        "username": {
          "type": "string", 
          "description": "The name that uniquely identifies this user among all active users."
        }, 
        "uid": {
          "type": "string", 
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs."
        }, 
        "groups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The names of groups this user is a part of."
        }, 
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "type": "object", 
          "description": "Any additional information provided by the authenticator."
        }
      }
    }, 
    "v1.NodeSystemInfo": {
      "required": [
        "machineID", 
        "systemUUID", 
        "bootID", 
        "kernelVersion", 
        "osImage", 
        "containerRuntimeVersion", 
        "kubeletVersion", 
        "kubeProxyVersion", 
        "operatingSystem", 
        "architecture"
      ], 
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.", 
      "properties": {
        "kernelVersion": {
          "type": "string", 
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
        }, 
        "kubeletVersion": {
          "type": "string", 
          "description": "Kubelet Version reported by the node."
        }, 
        "containerRuntimeVersion": {
          "type": "string", 
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
        }, 
        "machineID": {
          "type": "string", 
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is prefered. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
        }, 
        "kubeProxyVersion": {
          "type": "string", 
          "description": "KubeProxy Version reported by the node."
        }, 
        "bootID": {
          "type": "string", 
          "description": "Boot ID reported by the node."
        }, 
        "osImage": {
          "type": "string", 
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
        }, 
        "architecture": {
          "type": "string", 
          "description": "The Architecture reported by the node"
        }, 
        "systemUUID": {
          "type": "string", 
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is prefered. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html"
        }, 
        "operatingSystem": {
          "type": "string", 
          "description": "The Operating System reported by the node"
        }
      }
    }, 
    "v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container", 
      "properties": {
        "role": {
          "type": "string", 
          "description": "Role is a SELinux role label that applies to the container."
        }, 
        "type": {
          "type": "string", 
          "description": "Type is a SELinux type label that applies to the container."
        }, 
        "user": {
          "type": "string", 
          "description": "User is a SELinux user label that applies to the container."
        }, 
        "level": {
          "type": "string", 
          "description": "Level is SELinux level label that applies to the container."
        }
      }
    }, 
    "v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.", 
      "properties": {
        "fieldPath": {
          "type": "string", 
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind of the referent. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#concurrency-control-and-consistency"
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace of the referent. More info: http://kubernetes.io/docs/user-guide/namespaces"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      }
    }, 
    "resource.Quantity": {
      "type": "string"
    }, 
    "v1beta1.SubjectAccessReview": {
      "required": [
        "spec"
      ], 
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not", 
          "$ref": "#/definitions/v1beta1.SubjectAccessReviewStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated", 
          "$ref": "#/definitions/v1beta1.SubjectAccessReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.ResourceFieldSelector": {
      "required": [
        "resource"
      ], 
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
      "properties": {
        "containerName": {
          "type": "string", 
          "description": "Container name: required for volumes, optional for env vars"
        }, 
        "resource": {
          "type": "string", 
          "description": "Required: resource to select"
        }, 
        "divisor": {
          "description": "Specifies the output format of the exposed resources, defaults to \"1\"", 
          "$ref": "#/definitions/resource.Quantity"
        }
      }
    }, 
    "v1.EndpointSubset": {
      "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n  {\n    Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n    Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n  }\nThe resulting set of endpoints can be viewed as:\n    a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n    b: [ 10.10.1.1:309, 10.10.2.2:309 ]", 
      "properties": {
        "notReadyAddresses": {
          "items": {
            "$ref": "#/definitions/v1.EndpointAddress"
          }, 
          "type": "array", 
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check."
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/v1.EndpointPort"
          }, 
          "type": "array", 
          "description": "Port numbers available on the related IP addresses."
        }, 
        "addresses": {
          "items": {
            "$ref": "#/definitions/v1.EndpointAddress"
          }, 
          "type": "array", 
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize."
        }
      }
    }, 
    "v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.", 
      "properties": {
        "ingress": {
          "items": {
            "$ref": "#/definitions/v1.LoadBalancerIngress"
          }, 
          "type": "array", 
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points."
        }
      }
    }, 
    "v1beta1.HorizontalPodAutoscaler": {
      "description": "configuration of a horizontal pod autoscaler.", 
      "properties": {
        "status": {
          "description": "current information about the autoscaler.", 
          "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "behaviour of autoscaler. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/v1beta1.HorizontalPodAutoscalerSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "unversioned.APIResourceList": {
      "required": [
        "groupVersion", 
        "resources"
      ], 
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "groupVersion": {
          "type": "string", 
          "description": "groupVersion is the group and version this APIResourceList is for."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "resources": {
          "items": {
            "$ref": "#/definitions/unversioned.APIResource"
          }, 
          "type": "array", 
          "description": "resources contains the name of the resources and if they are namespaced."
        }
      }
    }, 
    "v1beta1.DeploymentSpec": {
      "required": [
        "template"
      ], 
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.", 
      "properties": {
        "progressDeadlineSeconds": {
          "type": "integer", 
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.", 
          "format": "int32"
        }, 
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }, 
        "paused": {
          "type": "boolean", 
          "description": "Indicates that the deployment is paused and will not be processed by the deployment controller."
        }, 
        "rollbackTo": {
          "description": "The config this deployment is rolling back to. Will be cleared after rollback is done.", 
          "$ref": "#/definitions/v1beta1.RollbackConfig"
        }, 
        "template": {
          "description": "Template describes the pods that will be created.", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "revisionHistoryLimit": {
          "type": "integer", 
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.", 
          "format": "int32"
        }, 
        "strategy": {
          "description": "The deployment strategy to use to replace existing pods with new ones.", 
          "$ref": "#/definitions/v1beta1.DeploymentStrategy"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }
      }
    }, 
    "v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.", 
      "properties": {
        "command": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
        }
      }
    }, 
    "v1.HorizontalPodAutoscalerStatus": {
      "required": [
        "currentReplicas", 
        "desiredReplicas"
      ], 
      "description": "current status of a horizontal pod autoscaler", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "most recent generation observed by this autoscaler.", 
          "format": "int64"
        }, 
        "currentReplicas": {
          "type": "integer", 
          "description": "current number of replicas of pods managed by this autoscaler.", 
          "format": "int32"
        }, 
        "lastScaleTime": {
          "description": "last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "currentCPUUtilizationPercentage": {
          "type": "integer", 
          "description": "current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.", 
          "format": "int32"
        }, 
        "desiredReplicas": {
          "type": "integer", 
          "description": "desired number of replicas of pods managed by this autoscaler.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface", 
      "properties": {
        "verb": {
          "type": "string", 
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all."
        }, 
        "resource": {
          "type": "string", 
          "description": "Resource is one of the existing resource types.  \"*\" means all."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all."
        }, 
        "version": {
          "type": "string", 
          "description": "Version is the API Version of the Resource.  \"*\" means all."
        }, 
        "group": {
          "type": "string", 
          "description": "Group is the API Group of the Resource.  \"*\" means all."
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview"
        }, 
        "subresource": {
          "type": "string", 
          "description": "Subresource is one of the existing resource types.  \"\" means none."
        }
      }
    }, 
    "v1alpha1.ClusterRole": {
      "required": [
        "rules"
      ], 
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/v1alpha1.PolicyRule"
          }, 
          "type": "array", 
          "description": "Rules holds all the PolicyRules for this ClusterRole"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        }, 
        {
          "type": "integer"
        }
      ]
    }, 
    "v1beta1.JobSpec": {
      "required": [
        "template"
      ], 
      "description": "JobSpec describes how the job execution will look like.", 
      "properties": {
        "activeDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer", 
          "format": "int64"
        }, 
        "completions": {
          "type": "integer", 
          "description": "Completions specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "format": "int32"
        }, 
        "autoSelector": {
          "type": "boolean", 
          "description": "AutoSelector controls generation of pod labels and pod selectors. It was not present in the original extensions/v1beta1 Job definition, but exists to allow conversion from batch/v1 Jobs, where it corresponds to, but has the opposite meaning as, ManualSelector. More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md"
        }, 
        "parallelism": {
          "type": "integer", 
          "description": "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "format": "int32"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created when executing a job. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that should match the pod count. Normally, the system sets this field for you. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1beta1.IngressTLS": {
      "description": "IngressTLS describes the transport layer security associated with an Ingress.", 
      "properties": {
        "hosts": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified."
        }, 
        "secretName": {
          "type": "string", 
          "description": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing."
        }
      }
    }, 
    "v1beta1.HorizontalPodAutoscalerSpec": {
      "required": [
        "scaleRef", 
        "maxReplicas"
      ], 
      "description": "specification of a horizontal pod autoscaler.", 
      "properties": {
        "minReplicas": {
          "type": "integer", 
          "description": "lower limit for the number of pods that can be set by the autoscaler, default 1.", 
          "format": "int32"
        }, 
        "scaleRef": {
          "description": "reference to Scale subresource; horizontal pod autoscaler will learn the current resource consumption from its status, and will set the desired number of pods by modifying its spec.", 
          "$ref": "#/definitions/v1beta1.SubresourceReference"
        }, 
        "cpuUtilization": {
          "description": "target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified it defaults to the target CPU utilization at 80% of the requested resources.", 
          "$ref": "#/definitions/v1beta1.CPUTargetUtilization"
        }, 
        "maxReplicas": {
          "type": "integer", 
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.", 
          "format": "int32"
        }
      }
    }, 
    "v1alpha1.CertificateSigningRequestStatus": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1alpha1.CertificateSigningRequestCondition"
          }, 
          "type": "array", 
          "description": "Conditions applied to the request, such as approval or denial."
        }, 
        "certificate": {
          "type": "string", 
          "description": "If request was approved, the controller will place the issued certificate here.", 
          "format": "byte"
        }
      }
    }, 
    "unversioned.Time": {
      "type": "string", 
      "format": "date-time"
    }, 
    "v1beta1.IngressList": {
      "required": [
        "items"
      ], 
      "description": "IngressList is a collection of Ingress.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1beta1.Ingress"
          }, 
          "type": "array", 
          "description": "Items is the list of Ingress."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.GlusterfsVolumeSource": {
      "required": [
        "endpoints", 
        "path"
      ], 
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path is the Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "endpoints": {
          "type": "string", 
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
        }
      }
    }, 
    "v1.ServiceAccountList": {
      "required": [
        "items"
      ], 
      "description": "ServiceAccountList is a list of ServiceAccount objects", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.ServiceAccount"
          }, 
          "type": "array", 
          "description": "List of ServiceAccounts. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md#service-accounts"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.JobStatus": {
      "description": "JobStatus represents the current state of a Job.", 
      "properties": {
        "failed": {
          "type": "integer", 
          "description": "Failed is the number of pods which reached Phase Failed.", 
          "format": "int32"
        }, 
        "completionTime": {
          "description": "CompletionTime represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "startTime": {
          "description": "StartTime represents time when the job was acknowledged by the Job Manager. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "succeeded": {
          "type": "integer", 
          "description": "Succeeded is the number of pods which reached Phase Succeeded.", 
          "format": "int32"
        }, 
        "active": {
          "type": "integer", 
          "description": "Active is the number of actively running pods.", 
          "format": "int32"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/v1beta1.JobCondition"
          }, 
          "type": "array", 
          "description": "Conditions represent the latest available observations of an object's current state. More info: http://kubernetes.io/docs/user-guide/jobs"
        }
      }
    }, 
    "v1.ConfigMap": {
      "description": "ConfigMap holds configuration data for pods to consume.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "data": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Data contains the configuration data. Each key must be a valid DNS_SUBDOMAIN with an optional leading dot."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.IngressRule": {
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.", 
      "properties": {
        "host": {
          "type": "string", 
          "description": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue."
        }, 
        "http": {
          "$ref": "#/definitions/v1beta1.HTTPIngressRuleValue"
        }
      }
    }, 
    "v1.Binding": {
      "required": [
        "target"
      ], 
      "description": "Binding ties one object to another. For example, a pod is bound to a node by a scheduler.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "target": {
          "description": "The target object that you want to bind to the standard object.", 
          "$ref": "#/definitions/v1.ObjectReference"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.IngressSpec": {
      "description": "IngressSpec describes the Ingress the user wishes to exist.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/v1beta1.IngressRule"
          }, 
          "type": "array", 
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend."
        }, 
        "tls": {
          "items": {
            "$ref": "#/definitions/v1beta1.IngressTLS"
          }, 
          "type": "array", 
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI."
        }, 
        "backend": {
          "description": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.", 
          "$ref": "#/definitions/v1beta1.IngressBackend"
        }
      }
    }, 
    "v1.ContainerStatus": {
      "required": [
        "name", 
        "ready", 
        "restartCount", 
        "image", 
        "imageID"
      ], 
      "description": "ContainerStatus contains details for the current status of this container.", 
      "properties": {
        "restartCount": {
          "type": "integer", 
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.", 
          "format": "int32"
        }, 
        "name": {
          "type": "string", 
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated."
        }, 
        "image": {
          "type": "string", 
          "description": "The image the container is running. More info: http://kubernetes.io/docs/user-guide/images"
        }, 
        "imageID": {
          "type": "string", 
          "description": "ImageID of the container's image."
        }, 
        "state": {
          "description": "Details about the container's current condition.", 
          "$ref": "#/definitions/v1.ContainerState"
        }, 
        "ready": {
          "type": "boolean", 
          "description": "Specifies whether the container has passed its readiness probe."
        }, 
        "lastState": {
          "description": "Details about the container's last termination condition.", 
          "$ref": "#/definitions/v1.ContainerState"
        }, 
        "containerID": {
          "type": "string", 
          "description": "Container's ID in the format 'docker://<container_id>'. More info: http://kubernetes.io/docs/user-guide/container-environment#container-information"
        }
      }
    }, 
    "v1.PhotonPersistentDiskVolumeSource": {
      "required": [
        "pdID"
      ], 
      "description": "Represents a Photon Controller persistent disk resource.", 
      "properties": {
        "fsType": {
          "type": "string", 
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }, 
        "pdID": {
          "type": "string", 
          "description": "ID that identifies Photon Controller persistent disk"
        }
      }
    }, 
    "v1.ServiceAccount": {
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets", 
      "properties": {
        "secrets": {
          "items": {
            "$ref": "#/definitions/v1.ObjectReference"
          }, 
          "type": "array", 
          "description": "Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: http://kubernetes.io/docs/user-guide/secrets"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "imagePullSecrets": {
          "items": {
            "$ref": "#/definitions/v1.LocalObjectReference"
          }, 
          "type": "array", 
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: http://kubernetes.io/docs/user-guide/secrets#manually-specifying-an-imagepullsecret"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.HTTPHeader": {
      "required": [
        "name", 
        "value"
      ], 
      "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The header field name"
        }, 
        "value": {
          "type": "string", 
          "description": "The header field value"
        }
      }
    }, 
    "version.Info": {
      "required": [
        "major", 
        "minor", 
        "gitVersion", 
        "gitCommit", 
        "gitTreeState", 
        "buildDate", 
        "goVersion", 
        "compiler", 
        "platform"
      ], 
      "description": "Info contains versioning information. how we'll want to distribute that information.", 
      "properties": {
        "major": {
          "type": "string"
        }, 
        "gitTreeState": {
          "type": "string"
        }, 
        "buildDate": {
          "type": "string"
        }, 
        "platform": {
          "type": "string"
        }, 
        "gitVersion": {
          "type": "string"
        }, 
        "gitCommit": {
          "type": "string"
        }, 
        "goVersion": {
          "type": "string"
        }, 
        "minor": {
          "type": "string"
        }, 
        "compiler": {
          "type": "string"
        }
      }
    }, 
    "v1.EventSource": {
      "description": "EventSource contains information for an event.", 
      "properties": {
        "host": {
          "type": "string", 
          "description": "Node name on which the event is generated."
        }, 
        "component": {
          "type": "string", 
          "description": "Component from which the event is generated."
        }
      }
    }, 
    "v2alpha1.CronJob": {
      "description": "CronJob represents the configuration of a single cron job.", 
      "properties": {
        "status": {
          "description": "Status is a structure describing current status of a job. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v2alpha1.CronJobStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec is a structure defining the expected behavior of a job, including the schedule. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v2alpha1.CronJobSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.Eviction": {
      "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.", 
      "properties": {
        "deleteOptions": {
          "description": "DeleteOptions may be provided", 
          "$ref": "#/definitions/v1.DeleteOptions"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "ObjectMeta describes the pod that is being evicted.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v2alpha1.JobSpec": {
      "required": [
        "template"
      ], 
      "description": "JobSpec describes how the job execution will look like.", 
      "properties": {
        "activeDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer", 
          "format": "int64"
        }, 
        "parallelism": {
          "type": "integer", 
          "description": "Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "format": "int32"
        }, 
        "completions": {
          "type": "integer", 
          "description": "Completions specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "format": "int32"
        }, 
        "manualSelector": {
          "type": "boolean", 
          "description": "ManualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created when executing a job. More info: http://kubernetes.io/docs/user-guide/jobs", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that should match the pod count. Normally, the system sets this field for you. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors", 
          "$ref": "#/definitions/unversioned.LabelSelector"
        }
      }
    }, 
    "v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
          }, 
          "type": "array", 
          "description": "Items is a list of downward API volume file"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }
      }
    }, 
    "v1.NodeDaemonEndpoints": {
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.", 
      "properties": {
        "kubeletEndpoint": {
          "description": "Endpoint on which Kubelet is listening.", 
          "$ref": "#/definitions/v1.DaemonEndpoint"
        }
      }
    }, 
    "v1.EndpointsList": {
      "required": [
        "items"
      ], 
      "description": "EndpointsList is a list of endpoints.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.Endpoints"
          }, 
          "type": "array", 
          "description": "List of endpoints."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1beta1.LocalSubjectAccessReview": {
      "required": [
        "spec"
      ], 
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not", 
          "$ref": "#/definitions/v1beta1.SubjectAccessReviewStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.", 
          "$ref": "#/definitions/v1beta1.SubjectAccessReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1beta1.IngressStatus": {
      "description": "IngressStatus describe the current state of the Ingress.", 
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer.", 
          "$ref": "#/definitions/v1.LoadBalancerStatus"
        }
      }
    }, 
    "v1.NodeAddress": {
      "required": [
        "type", 
        "address"
      ], 
      "description": "NodeAddress contains information for the node's address.", 
      "properties": {
        "type": {
          "type": "string", 
          "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
        }, 
        "address": {
          "type": "string", 
          "description": "The node address."
        }
      }
    }, 
    "v1.QuobyteVolumeSource": {
      "required": [
        "registry", 
        "volume"
      ], 
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "volume": {
          "type": "string", 
          "description": "Volume is a string that references an already created Quobyte volume by name."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
        }, 
        "group": {
          "type": "string", 
          "description": "Group to map volume access to Default is no group"
        }, 
        "registry": {
          "type": "string", 
          "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
        }, 
        "user": {
          "type": "string", 
          "description": "User to map volume access to Defaults to serivceaccount user"
        }
      }
    }, 
    "v1.ScaleSpec": {
      "description": "ScaleSpec describes the attributes of a scale subresource.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "desired number of instances for the scaled object.", 
          "format": "int32"
        }
      }
    }, 
    "v1beta1.HorizontalPodAutoscalerStatus": {
      "required": [
        "currentReplicas", 
        "desiredReplicas"
      ], 
      "description": "current status of a horizontal pod autoscaler", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "most recent generation observed by this autoscaler.", 
          "format": "int64"
        }, 
        "currentReplicas": {
          "type": "integer", 
          "description": "current number of replicas of pods managed by this autoscaler.", 
          "format": "int32"
        }, 
        "lastScaleTime": {
          "description": "last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "currentCPUUtilizationPercentage": {
          "type": "integer", 
          "description": "current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.", 
          "format": "int32"
        }, 
        "desiredReplicas": {
          "type": "integer", 
          "description": "desired number of replicas of pods managed by this autoscaler.", 
          "format": "int32"
        }
      }
    }, 
    "v1.ConfigMapList": {
      "required": [
        "items"
      ], 
      "description": "ConfigMapList is a resource containing a list of ConfigMap objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/v1.ConfigMap"
          }, 
          "type": "array", 
          "description": "Items is the list of ConfigMaps."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/unversioned.ListMeta"
        }
      }
    }, 
    "v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.", 
      "properties": {
        "preStop": {
          "description": "PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details", 
          "$ref": "#/definitions/v1.Handler"
        }, 
        "postStart": {
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details", 
          "$ref": "#/definitions/v1.Handler"
        }
      }
    }, 
    "v1beta1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update.", 
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.", 
          "$ref": "#/definitions/intstr.IntOrString"
        }, 
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.", 
          "$ref": "#/definitions/intstr.IntOrString"
        }
      }
    }, 
    "v1.Event": {
      "required": [
        "metadata", 
        "involvedObject"
      ], 
      "description": "Event is a report of an event somewhere in the cluster.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "The number of times this event has occurred.", 
          "format": "int32"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "firstTimestamp": {
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.", 
          "$ref": "#/definitions/unversioned.Time"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "source": {
          "description": "The component reporting this event. Should be a short machine understandable string.", 
          "$ref": "#/definitions/v1.EventSource"
        }, 
        "reason": {
          "type": "string", 
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status."
        }, 
        "involvedObject": {
          "description": "The object that this event is about.", 
          "$ref": "#/definitions/v1.ObjectReference"
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable description of the status of this operation."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of this event (Normal, Warning), new types could be added in the future"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.", 
      "properties": {
        "uid": {
          "type": "string", 
          "description": "Specifies the target UID."
        }
      }
    }, 
    "v1.Scale": {
      "description": "Scale represents a scaling request for a resource.", 
      "properties": {
        "status": {
          "description": "current status of the scale. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status. Read-only.", 
          "$ref": "#/definitions/v1.ScaleStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "defines the behavior of the scale. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/v1.ScaleSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata.", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "v1.NFSVolumeSource": {
      "required": [
        "server", 
        "path"
      ], 
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
        }, 
        "server": {
          "type": "string", 
          "description": "Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
        }
      }
    }, 
    "v1beta1.CPUTargetUtilization": {
      "required": [
        "targetPercentage"
      ], 
      "properties": {
        "targetPercentage": {
          "type": "integer", 
          "description": "fraction of the requested CPU that should be utilized/used, e.g. 70 means that 70% of the requested CPU should be in use.", 
          "format": "int32"
        }
      }
    }, 
    "v1.ReplicationControllerSpec": {
      "description": "ReplicationControllerSpec is the specification of a replication controller.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: http://kubernetes.io/docs/user-guide/replication-controller#what-is-a-replication-controller", 
          "format": "int32"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: http://kubernetes.io/docs/user-guide/replication-controller#pod-template", 
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }, 
        "selector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors"
        }
      }
    }, 
    "v1.HTTPGetAction": {
      "required": [
        "port"
      ], 
      "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path to access on the HTTP server."
        }, 
        "host": {
          "type": "string", 
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
        }, 
        "scheme": {
          "type": "string", 
          "description": "Scheme to use for connecting to the host. Defaults to HTTP."
        }, 
        "httpHeaders": {
          "items": {
            "$ref": "#/definitions/v1.HTTPHeader"
          }, 
          "type": "array", 
          "description": "Custom headers to set in the request. HTTP allows repeated headers."
        }, 
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.", 
          "$ref": "#/definitions/intstr.IntOrString"
        }
      }
    }, 
    "v1beta1.RollbackConfig": {
      "properties": {
        "revision": {
          "type": "integer", 
          "description": "The revision to rollback to. If set to 0, rollbck to the last revision.", 
          "format": "int64"
        }
      }
    }, 
    "v1beta1.TokenReviewSpec": {
      "description": "TokenReviewSpec is a description of the token authentication request.", 
      "properties": {
        "token": {
          "type": "string", 
          "description": "Token is the opaque bearer token."
        }
      }
    }, 
    "v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "stringData": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }, 
        "type": {
          "type": "string", 
          "description": "Used to facilitate programmatic handling of secret data."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "data": {
          "additionalProperties": {
            "type": "string", 
            "format": "byte"
          }, 
          "type": "object", 
          "description": "Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4"
        }
      }
    }, 
    "v1.ReplicationController": {
      "description": "ReplicationController represents the configuration of a replication controller.", 
      "properties": {
        "status": {
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.ReplicationControllerStatus"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/v1.ReplicationControllerSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata", 
          "$ref": "#/definitions/v1.ObjectMeta"
        }
      }
    }, 
    "unversioned.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.", 
      "properties": {
        "field": {
          "type": "string", 
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
        }, 
        "reason": {
          "type": "string", 
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
        }
      }
    }
  }
}